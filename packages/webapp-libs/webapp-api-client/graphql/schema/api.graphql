schema {
  query: Query
  mutation: ApiMutation
  subscription: ApiSubscription
}
"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime
"""
Allows use of a JSON String for input / output from the GraphQL schema.

Use of this type is *not recommended* as you lose the benefits of having a defined, static
schema (one of the key benefits of GraphQL).
"""
scalar JSONString
"The `Decimal` scalar type represents a python Decimal."
scalar Decimal
"""
The `BigInt` scalar type represents non-fractional whole numeric values.
`BigInt` is not constrained to 32-bit like the `Int` type and thus is a less
compatible type.
"""
scalar BigInt
"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar
"""
Create scalar that ignores normal serialization/deserialization, since
that will be handled by the multipart request spec
"""
scalar Upload
type Query {
  allTenants(before: String, after: String, first: Int, last: Int): TenantConnection
  tenant(id: ID): TenantType
  allSubscriptionPlans(before: String, after: String, first: Int, last: Int): StripePriceConnection
  activeSubscription(tenantId: ID): SubscriptionScheduleType
  allPaymentMethods(tenantId: ID, before: String, after: String, first: Int, last: Int): PaymentMethodConnection
  allCharges(tenantId: ID, before: String, after: String, first: Int, last: Int): ChargeConnection
  charge(id: ID, tenantId: ID): StripeChargeType
  paymentIntent(id: ID, tenantId: ID): StripePaymentIntentType
  currentUser: CurrentUserType
  hasUnreadNotifications: Boolean
  allNotifications(before: String, after: String, first: Int, last: Int): NotificationConnection
  crudDemoItem(id: ID, tenantId: ID): CrudDemoItemType
  allCrudDemoItems(tenantId: ID, search: String, sort: CrudDemoItemSort, before: String, after: String, first: Int, last: Int): CrudDemoItemConnection
  allContentfulDemoItemFavorites(before: String, after: String, first: Int, last: Int): ContentfulDemoItemFavoriteConnection
  allDocumentDemoItems(before: String, after: String, first: Int, last: Int): DocumentDemoItemConnection
  node(
    "The ID of the object"
    id: ID!
  ): Node
}
type TenantConnection {
  "Pagination data for this connection."
  pageInfo: PageInfo!
  "Contains the nodes in this connection."
  edges: [TenantEdge]!
}
"The Relay compliant `PageInfo` type, containing data necessary to paginate this connection."
type PageInfo {
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}
"A Relay edge containing a `Tenant` and its cursor."
type TenantEdge {
  "The item at the end of the edge"
  node: TenantType
  "A cursor for use in pagination"
  cursor: String!
}
type TenantType implements Node {
  id: ID!
  name: String
  slug: String
  type: String
  billingEmail: String
  userMemberships: [TenantMembershipType]
  membership: TenantMembershipType!
}
type TenantMembershipType implements Node {
  id: ID!
  role: TenantUserRole
  inviteeEmailAddress: String
  invitationAccepted: Boolean
  userId: ID
  invitationToken: String
  firstName: String
  lastName: String
  userEmail: String
  avatar: String
}
type StripePriceConnection {
  "Pagination data for this connection."
  pageInfo: PageInfo!
  "Contains the nodes in this connection."
  edges: [StripePriceEdge]!
}
"A Relay edge containing a `StripePrice` and its cursor."
type StripePriceEdge {
  "The item at the end of the edge"
  node: StripePriceType
  "A cursor for use in pagination"
  cursor: String!
}
type StripePriceType implements Node {
  djstripeCreated: DateTime!
  djstripeUpdated: DateTime!
  djstripeId: ID!
  "The ID of the object"
  id: ID!
  "Null here indicates that the livemode status is unknown or was previously unrecorded. Otherwise, this field indicates whether this record comes from Stripe test mode or live mode operation."
  livemode: Boolean
  "The datetime this object was created in stripe."
  created: DateTime
  "A set of key/value pairs that you can attach to an object. It can be useful for storing additional information about an object in a structured format."
  metadata: JSONString
  "A description of this object."
  description: String
  "Whether the price can be used for new purchases."
  active: Boolean!
  "Three-letter ISO currency code"
  currency: String!
  "A brief description of the plan, hidden from customers."
  nickname: String!
  "The product this price is associated with."
  product: StripeProductType!
  "The recurring components of a price such as `interval` and `usage_type`."
  recurring: JSONString
  "Whether the price is for a one-time purchase or a recurring (subscription) purchase."
  type: DjstripePriceTypeChoices!
  "The unit amount in cents to be charged, represented as a whole integer if possible. Null if a sub-cent precision is required."
  unitAmount: BigInt
  "The unit amount in cents to be charged, represented as a decimal string with at most 12 decimal places."
  unitAmountDecimal: Decimal
  "Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with `usage_type=licensed`), or per unit of total usage (for prices with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes."
  billingScheme: DjstripePriceBillingSchemeChoices
  "A lookup key used to retrieve prices dynamically from a static string."
  lookupKey: String
  "Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`."
  tiers: JSONString
  "Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price, in `graduated` tiering pricing can successively change as the quantity grows."
  tiersMode: DjstripePriceTiersModeChoices
  "Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`."
  transformQuantity: JSONString
  "The default price this product is associated with."
  products(offset: Int, before: String, after: String, first: Int, last: Int): StripeProductTypeConnection!
  pk: String
}
type StripeProductType implements Node {
  djstripeCreated: DateTime!
  djstripeUpdated: DateTime!
  djstripeId: ID!
  "The ID of the object"
  id: ID!
  "Null here indicates that the livemode status is unknown or was previously unrecorded. Otherwise, this field indicates whether this record comes from Stripe test mode or live mode operation."
  livemode: Boolean
  "The datetime this object was created in stripe."
  created: DateTime
  "A set of key/value pairs that you can attach to an object. It can be useful for storing additional information about an object in a structured format."
  metadata: JSONString
  "A description of this object."
  description: String
  "The product's name, meant to be displayable to the customer. Applicable to both `service` and `good` types."
  name: String!
  "The default price this product is associated with."
  defaultPrice: StripePriceType
  "The type of the product. The product is either of type `good`, which is eligible for use with Orders and SKUs, or `service`, which is eligible for use with Subscriptions and Plans."
  type: DjstripeProductTypeChoices!
  "Whether the product is currently available for purchase. Only applicable to products of `type=good`."
  active: Boolean
  """
  A list of up to 5 attributes that each SKU can provide values for (e.g., `["color", "size"]`). Only applicable to products of `type=good`.
  """
  attributes: JSONString
  "A short one-line description of the product, meant to be displayableto the customer. Only applicable to products of `type=good`."
  caption: String!
  "An array of connect application identifiers that cannot purchase this product. Only applicable to products of `type=good`."
  deactivateOn: JSONString
  "A list of up to 8 URLs of images for this product, meant to be displayable to the customer. Only applicable to products of `type=good`."
  images: JSONString
  "The dimensions of this product for shipping purposes. A SKU associated with this product can override this value by having its own `package_dimensions`. Only applicable to products of `type=good`."
  packageDimensions: JSONString
  "Whether this product is a shipped good. Only applicable to products of `type=good`."
  shippable: Boolean
  "A URL of a publicly-accessible webpage for this product. Only applicable to products of `type=good`."
  url: String
  "Extra information about a product which will appear on your customer's credit card statement. In the case that multiple products are billed at once, the first statement descriptor will be used. Only available on products of type=`service`."
  statementDescriptor: String!
  unitLabel: String!
  "The product this price is associated with."
  prices(offset: Int, before: String, after: String, first: Int, last: Int): StripePriceTypeConnection!
  "The product whose pricing this plan determines."
  planSet(offset: Int, before: String, after: String, first: Int, last: Int): SubscriptionPlanTypeConnection!
  pk: String
}
type StripePriceTypeConnection {
  "Pagination data for this connection."
  pageInfo: PageInfo!
  "Contains the nodes in this connection."
  edges: [StripePriceTypeEdge]!
}
"A Relay edge containing a `StripePriceType` and its cursor."
type StripePriceTypeEdge {
  "The item at the end of the edge"
  node: StripePriceType
  "A cursor for use in pagination"
  cursor: String!
}
type SubscriptionPlanTypeConnection {
  "Pagination data for this connection."
  pageInfo: PageInfo!
  "Contains the nodes in this connection."
  edges: [SubscriptionPlanTypeEdge]!
}
"A Relay edge containing a `SubscriptionPlanType` and its cursor."
type SubscriptionPlanTypeEdge {
  "The item at the end of the edge"
  node: SubscriptionPlanType
  "A cursor for use in pagination"
  cursor: String!
}
type SubscriptionPlanType implements Node {
  djstripeCreated: DateTime!
  djstripeUpdated: DateTime!
  djstripeId: ID!
  "The ID of the object"
  id: ID!
  "Null here indicates that the livemode status is unknown or was previously unrecorded. Otherwise, this field indicates whether this record comes from Stripe test mode or live mode operation."
  livemode: Boolean
  "The datetime this object was created in stripe."
  created: DateTime
  "A set of key/value pairs that you can attach to an object. It can be useful for storing additional information about an object in a structured format."
  metadata: JSONString
  "A description of this object."
  description: String
  "Whether the plan can be used for new purchases."
  active: Boolean!
  "Specifies a usage aggregation strategy for plans of usage_type=metered. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for picking the last usage record reported within a period, `last_ever` for picking the last usage record ever (across period bounds) or max which picks the usage record with the maximum reported usage during a period. Defaults to `sum`."
  aggregateUsage: DjstripePlanAggregateUsageChoices
  "Amount (as decimal) to be charged on the interval specified."
  amount: Decimal
  "The unit amount in cents to be charged, represented as a decimal string with at most 12 decimal places."
  amountDecimal: Decimal
  "Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in amount) will be charged per unit in quantity (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the tiers and tiers_mode attributes."
  billingScheme: DjstripePlanBillingSchemeChoices
  "Three-letter ISO currency code"
  currency: String!
  "The frequency with which a subscription should be billed."
  interval: DjstripePlanIntervalChoices!
  "The number of intervals (specified in the interval property) between each subscription billing."
  intervalCount: Int
  "A brief description of the plan, hidden from customers."
  nickname: String!
  "The product whose pricing this plan determines."
  product: StripeProductType
  "Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`."
  tiers: JSONString
  "Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price, in `graduated` tiering pricing can successively change as the quantity grows."
  tiersMode: DjstripePlanTiersModeChoices
  "Apply a transformation to the reported usage or set quantity before computing the billed price. Cannot be combined with `tiers`."
  transformUsage: JSONString
  "Number of trial period days granted when subscribing a customer to this plan. Null if the plan has no trial period."
  trialPeriodDays: Int
  "Configures how the quantity per period should be determined, can be either `metered` or `licensed`. `licensed` will automatically bill the `quantity` set for a plan when adding it to a subscription, `metered` will aggregate the total usage based on usage records. Defaults to `licensed`."
  usageType: DjstripePlanUsageTypeChoices!
  "The plan associated with this subscription. This value will be `null` for multi-plan subscriptions"
  subscriptions(offset: Int, before: String, after: String, first: Int, last: Int): StripeSubscriptionTypeConnection!
  pk: String
}
type StripeSubscriptionTypeConnection {
  "Pagination data for this connection."
  pageInfo: PageInfo!
  "Contains the nodes in this connection."
  edges: [StripeSubscriptionTypeEdge]!
}
"A Relay edge containing a `StripeSubscriptionType` and its cursor."
type StripeSubscriptionTypeEdge {
  "The item at the end of the edge"
  node: StripeSubscriptionType
  "A cursor for use in pagination"
  cursor: String!
}
type StripeSubscriptionType implements Node {
  "The ID of the object"
  id: ID!
  "End of the current period for which the subscription has been invoiced. At the end of this period, a new invoice will be created."
  currentPeriodEnd: DateTime!
  "Start of the current period for which the subscription has been invoiced."
  currentPeriodStart: DateTime!
  "Date when the subscription was first created. The date might differ from the created date due to backdating."
  startDate: DateTime
  "The status of this subscription."
  status: DjstripeSubscriptionStatusChoices!
  "If the subscription has a trial, the end of that trial."
  trialEnd: DateTime
  "If the subscription has a trial, the beginning of that trial."
  trialStart: DateTime
  pk: String
  plan: SubscriptionPlanType
}
type StripeProductTypeConnection {
  "Pagination data for this connection."
  pageInfo: PageInfo!
  "Contains the nodes in this connection."
  edges: [StripeProductTypeEdge]!
}
"A Relay edge containing a `StripeProductType` and its cursor."
type StripeProductTypeEdge {
  "The item at the end of the edge"
  node: StripeProductType
  "A cursor for use in pagination"
  cursor: String!
}
type SubscriptionScheduleType implements Node {
  djstripeCreated: DateTime!
  djstripeUpdated: DateTime!
  djstripeId: ID!
  "The ID of the object"
  id: ID!
  "Null here indicates that the livemode status is unknown or was previously unrecorded. Otherwise, this field indicates whether this record comes from Stripe test mode or live mode operation."
  livemode: Boolean
  "The datetime this object was created in stripe."
  created: DateTime
  "A set of key/value pairs that you can attach to an object. It can be useful for storing additional information about an object in a structured format."
  metadata: JSONString
  "A description of this object."
  description: String
  "Time at which the subscription schedule was canceled."
  canceledAt: DateTime
  "Time at which the subscription schedule was completed."
  completedAt: DateTime
  "Object representing the start and end dates for the current phase of the subscription schedule, if it is `active`."
  currentPhase: JSONString
  "Object representing the subscription schedule's default settings."
  defaultSettings: JSONString
  "Behavior of the subscription schedule and underlying subscription when it ends."
  endBehavior: DjstripeSubscriptionScheduleEndBehaviorChoices!
  phases: [SubscriptionSchedulePhaseType]
  "Time at which the subscription schedule was released."
  releasedAt: DateTime
  "The subscription once managed by this subscription schedule (if it is released)."
  releasedSubscription: StripeSubscriptionType
  "The present status of the subscription schedule. Possible values are `not_started`, `active`, `completed`, `released`, and `canceled`."
  status: DjstripeSubscriptionScheduleStatusChoices!
  subscription: StripeSubscriptionType
  "The schedule associated with this subscription."
  subscriptions(offset: Int, before: String, after: String, first: Int, last: Int): StripeSubscriptionTypeConnection!
  defaultPaymentMethod: StripePaymentMethodType
  canActivateTrial: Boolean
}
type SubscriptionSchedulePhaseType {
  startDate: DateTime
  endDate: String
  trialEnd: String
  item: SubscriptionSchedulePhaseItemType
}
type SubscriptionSchedulePhaseItemType {
  price: StripePriceType
  quantity: Int
}
type StripePaymentMethodType implements Node {
  "The ID of the object"
  id: ID!
  billingDetails: GenericScalar
  "The type of the PaymentMethod."
  type: DjstripePaymentMethodTypeChoices!
  card: GenericScalar
  pk: String
}
type PaymentMethodConnection {
  "Pagination data for this connection."
  pageInfo: PageInfo!
  "Contains the nodes in this connection."
  edges: [PaymentMethodEdge]!
}
"A Relay edge containing a `PaymentMethod` and its cursor."
type PaymentMethodEdge {
  "The item at the end of the edge"
  node: StripePaymentMethodType
  "A cursor for use in pagination"
  cursor: String!
}
type ChargeConnection {
  "Pagination data for this connection."
  pageInfo: PageInfo!
  "Contains the nodes in this connection."
  edges: [ChargeEdge]!
}
"A Relay edge containing a `Charge` and its cursor."
type ChargeEdge {
  "The item at the end of the edge"
  node: StripeChargeType
  "A cursor for use in pagination"
  cursor: String!
}
type StripeChargeType implements Node {
  djstripeCreated: DateTime!
  djstripeUpdated: DateTime!
  djstripeId: ID!
  "The ID of the object"
  id: ID!
  "Null here indicates that the livemode status is unknown or was previously unrecorded. Otherwise, this field indicates whether this record comes from Stripe test mode or live mode operation."
  livemode: Boolean
  "The datetime this object was created in stripe."
  created: DateTime
  "A set of key/value pairs that you can attach to an object. It can be useful for storing additional information about an object in a structured format."
  metadata: JSONString
  "A description of this object."
  description: String
  "Amount charged (as decimal)."
  amount: Decimal!
  "Amount (as decimal) captured (can be less than the amount attribute on the charge if a partial capture was issued)."
  amountCaptured: Decimal
  "Amount (as decimal) refunded (can be less than the amount attribute on the charge if a partial refund was issued)."
  amountRefunded: Decimal!
  "ID of the Connect application that created the charge."
  application: String!
  "The amount (as decimal) of the application fee (if any) requested for the charge."
  applicationFeeAmount: Decimal
  billingDetails: GenericScalar
  "The full statement descriptor that is passed to card networks, and that is displayed on your customers' credit card and bank statements. Allows you to see what the statement descriptor looks like after the static and dynamic portions are combined."
  calculatedStatementDescriptor: String!
  "If the charge was created without capturing, this boolean represents whether or not it is still uncaptured or has since been captured."
  captured: Boolean!
  "The currency in which the charge was made."
  currency: String!
  "Whether the charge has been disputed."
  disputed: Boolean!
  "Error code explaining reason for charge failure if available."
  failureCode: DjstripeChargeFailureCodeChoices
  "Message to user further explaining reason for charge failure if available."
  failureMessage: String!
  "Hash with information on fraud assessments for the charge."
  fraudDetails: JSONString
  "The invoice this charge is for if one exists."
  invoice: StripeInvoiceType
  "Details about whether or not the payment was accepted, and why."
  outcome: JSONString
  "True if the charge succeeded, or was successfully authorized for later capture, False otherwise."
  paid: Boolean!
  "PaymentIntent associated with this charge, if one exists."
  paymentIntent: StripePaymentIntentType
  "PaymentMethod used in this charge."
  paymentMethod: StripePaymentMethodType
  "Details about the payment method at the time of the transaction."
  paymentMethodDetails: JSONString
  "The email address that the receipt for this charge was sent to."
  receiptEmail: String!
  "The transaction number that appears on email receipts sent for this charge."
  receiptNumber: String!
  "This is the URL to view the receipt for this charge. The receipt is kept up-to-date to the latest state of the charge, including any refunds. If the charge is for an Invoice, the receipt will be stylized as an Invoice receipt."
  receiptUrl: String!
  "Whether or not the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false."
  refunded: Boolean!
  "Shipping information for the charge"
  shipping: JSONString
  "For card charges, use statement_descriptor_suffix instead. Otherwise, you can use this value as the complete description of a charge on your customers' statements. Must contain at least one letter, maximum 22 characters."
  statementDescriptor: String
  "Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that's set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor."
  statementDescriptorSuffix: String
  "The status of the payment."
  status: DjstripeChargeStatusChoices!
  "An optional dictionary including the account to automatically transfer to as part of a destination charge."
  transferData: JSONString
  "A string that identifies this transaction as part of a group."
  transferGroup: String
  latestInvoice: StripeInvoiceType
  pk: String
}
type StripeInvoiceType implements Node {
  djstripeCreated: DateTime!
  djstripeUpdated: DateTime!
  djstripeId: ID!
  "The ID of the object"
  id: ID!
  "Null here indicates that the livemode status is unknown or was previously unrecorded. Otherwise, this field indicates whether this record comes from Stripe test mode or live mode operation."
  livemode: Boolean
  "The datetime this object was created in stripe."
  created: DateTime
  "A set of key/value pairs that you can attach to an object. It can be useful for storing additional information about an object in a structured format."
  metadata: JSONString
  "A description of this object."
  description: String
  "The country of the business associated with this invoice, most often the business creating the invoice."
  accountCountry: String!
  "The public name of the business associated with this invoice, most often the business creating the invoice."
  accountName: String!
  "Final amount due (as decimal) at this time for this invoice. If the invoice's total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the amount_due may be 0. If there is a positive starting_balance for the invoice (the customer owes money), the amount_due will also take that into account. The charge that gets generated for the invoice will be for the amount specified in amount_due."
  amountDue: Decimal!
  "The amount, (as decimal), that was paid."
  amountPaid: Decimal
  "The amount remaining, (as decimal), that is due."
  amountRemaining: Decimal
  "The fee (as decimal) that will be applied to the invoice and transferred to the application owner's Stripe account when the invoice is paid."
  applicationFeeAmount: Decimal
  "Number of payment attempts made for this invoice, from the perspective of the payment retry schedule. Any payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count. In other words, manual payment attempts after the first attempt do not affect the retry schedule."
  attemptCount: Int!
  "Whether or not an attempt has been made to pay the invoice. An invoice is not attempted until 1 hour after the ``invoice.created`` webhook, for example, so you might not want to display that invoice as unpaid to your users."
  attempted: Boolean!
  "Controls whether Stripe will perform automatic collection of the invoice. When false, the invoice's state will not automatically advance without an explicit action."
  autoAdvance: Boolean
  "Indicates the reason why the invoice was created. subscription_cycle indicates an invoice created by a subscription advancing into a new period. subscription_create indicates an invoice created due to creating a subscription. subscription_update indicates an invoice created due to updating a subscription. subscription is set for all old invoices to indicate either a change to a subscription or a period advancement. manual is set for all invoices unrelated to a subscription (for example: created via the invoice editor). The upcoming value is reserved for simulated invoices per the upcoming invoice endpoint. subscription_threshold indicates an invoice created due to a billing threshold being reached."
  billingReason: DjstripeInvoiceBillingReasonChoices
  "The latest charge generated for this invoice, if any."
  charge: StripeChargeType
  "When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions."
  collectionMethod: DjstripeInvoiceCollectionMethodChoices
  "Three-letter ISO currency code"
  currency: String!
  "The customer's address. Until the invoice is finalized, this field will equal customer.address. Once the invoice is finalized, this field will no longer be updated."
  customerAddress: JSONString
  "The customer's email. Until the invoice is finalized, this field will equal customer.email. Once the invoice is finalized, this field will no longer be updated."
  customerEmail: String!
  "The customer's name. Until the invoice is finalized, this field will equal customer.name. Once the invoice is finalized, this field will no longer be updated."
  customerName: String!
  "The customer's phone number. Until the invoice is finalized, this field will equal customer.phone. Once the invoice is finalized, this field will no longer be updated."
  customerPhone: String!
  "The customer's shipping information. Until the invoice is finalized, this field will equal customer.shipping. Once the invoice is finalized, this field will no longer be updated."
  customerShipping: JSONString
  "The customer's tax exempt status. Until the invoice is finalized, this field will equal customer.tax_exempt. Once the invoice is finalized, this field will no longer be updated."
  customerTaxExempt: DjstripeInvoiceCustomerTaxExemptChoices!
  "Default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings."
  defaultPaymentMethod: StripePaymentMethodType
  "Deprecated! Please use discounts instead. Describes the current discount applied to this subscription, if there is one. When billing, a discount applied to a subscription overrides a discount applied on a customer-wide basis."
  discount: JSONString
  "The discounts applied to the invoice. Line item discounts are applied before invoice discounts."
  discounts: JSONString
  "The date on which payment for this invoice is due. This value will be null for invoices where billing=charge_automatically."
  dueDate: DateTime
  "Ending customer balance (in cents) after attempting to pay invoice. If the invoice has not been attempted yet, this will be null."
  endingBalance: BigInt
  "Footer displayed on the invoice."
  footer: String!
  "The URL for the hosted invoice page, which allows customers to view and pay an invoice. If the invoice has not been frozen yet, this will be null."
  hostedInvoiceUrl: String!
  "The link to download the PDF for the invoice. If the invoice has not been frozen yet, this will be null."
  invoicePdf: String!
  "The time at which payment will next be attempted."
  nextPaymentAttempt: DateTime
  "A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer's unique invoice_prefix if it is specified."
  number: String!
  "Whether payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer's account balance."
  paid: Boolean!
  "The PaymentIntent associated with this invoice. The PaymentIntent is generated when the invoice is finalized, and can then be used to pay the invoice.Note that voiding an invoice will cancel the PaymentIntent"
  paymentIntent: StripePaymentIntentType
  "End of the usage period during which invoice items were added to this invoice."
  periodEnd: DateTime!
  "Start of the usage period during which invoice items were added to this invoice."
  periodStart: DateTime!
  "Total amount (in cents) of all post-payment credit notes issued for this invoice."
  postPaymentCreditNotesAmount: BigInt
  "Total amount (in cents) of all pre-payment credit notes issued for this invoice."
  prePaymentCreditNotesAmount: BigInt
  "This is the transaction number that appears on email receipts sent for this invoice."
  receiptNumber: String
  "Starting customer balance (in cents) before attempting to pay invoice. If the invoice has not been attempted yet, this will be the current customer balance."
  startingBalance: BigInt!
  """
  An arbitrary string to be displayed on your customer's credit card statement. The statement description may not include <>"' characters, and will appear on your customer's statement in capital letters. Non-ASCII characters are automatically stripped. While most banks display this information consistently, some may display it incorrectly or not at all.
  """
  statementDescriptor: String!
  "The status of the invoice, one of draft, open, paid, uncollectible, or void."
  status: DjstripeInvoiceStatusChoices
  statusTransitions: JSONString
  "The subscription that this invoice was prepared for, if any."
  subscription: StripeSubscriptionType
  "Only set for upcoming invoices that preview prorations. The time used to calculate prorations."
  subscriptionProrationDate: DateTime
  "Total (as decimal) of all subscriptions, invoice items, and prorations on the invoice before any discount or tax is applied."
  subtotal: Decimal!
  "The amount (as decimal) of tax included in the total, calculated from ``tax_percent`` and the subtotal. If no ``tax_percent`` is defined, this value will be null."
  tax: Decimal
  "This percentage of the subtotal has been added to the total amount of the invoice, including invoice line items and discounts. This field is inherited from the subscription's ``tax_percent`` field, but can be changed before the invoice is paid. This field defaults to null."
  taxPercent: Decimal
  "If billing_reason is set to subscription_threshold this returns more information on which threshold rules triggered the invoice."
  thresholdReason: JSONString
  total: Decimal!
  "The time at which webhooks for this invoice were successfully delivered (if the invoice had no webhooks to deliver, this will match `date`). Invoice payment is delayed until webhooks are delivered, or until all webhook delivery attempts have been exhausted."
  webhooksDeliveredAt: DateTime
  "The invoice this charge is for if one exists."
  charges(offset: Int, before: String, after: String, first: Int, last: Int): StripeChargeTypeConnection!
  pk: String
}
type StripePaymentIntentType implements Node {
  "The ID of the object"
  id: ID!
  "Amount (in cents) intended to be collected by this PaymentIntent."
  amount: BigInt!
  "The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key."
  clientSecret: String!
  "Three-letter ISO currency code"
  currency: String!
  pk: String
}
type StripeChargeTypeConnection {
  "Pagination data for this connection."
  pageInfo: PageInfo!
  "Contains the nodes in this connection."
  edges: [StripeChargeTypeEdge]!
}
"A Relay edge containing a `StripeChargeType` and its cursor."
type StripeChargeTypeEdge {
  "The item at the end of the edge"
  node: StripeChargeType
  "A cursor for use in pagination"
  cursor: String!
}
type CurrentUserType {
  id: ID!
  email: String!
  otpEnabled: Boolean!
  otpVerified: Boolean!
  tenants: [TenantType]
  firstName: String
  lastName: String
  roles: [String]
  avatar: String
}
type NotificationConnection {
  "Pagination data for this connection."
  pageInfo: PageInfo!
  "Contains the nodes in this connection."
  edges: [NotificationEdge]!
}
"A Relay edge containing a `Notification` and its cursor."
type NotificationEdge {
  "The item at the end of the edge"
  node: NotificationType
  "A cursor for use in pagination"
  cursor: String!
}
type NotificationType implements Node {
  "The ID of the object"
  id: ID!
  user: UserType
  type: String!
  createdAt: DateTime!
  readAt: DateTime
  data: GenericScalar
  issuer: UserType
}
type UserType {
  id: ID!
  email: String!
  firstName: String
  lastName: String
  avatar: String
}
type CrudDemoItemType implements Node {
  tenant: TenantType
  "The ID of the object"
  id: ID!
  name: String!
  createdBy: CurrentUserType
}
type CrudDemoItemConnection {
  "Pagination data for this connection."
  pageInfo: PageInfo!
  "Contains the nodes in this connection."
  edges: [CrudDemoItemEdge]!
  pageCursors: PageCursors
}
"A Relay edge containing a `CrudDemoItem` and its cursor."
type CrudDemoItemEdge {
  "The item at the end of the edge"
  node: CrudDemoItemType
  "A cursor for use in pagination"
  cursor: String!
}
type PageCursors {
  around: [PageCursor]
  first: PageCursor
  last: PageCursor
  next: PageCursor
  previous: PageCursor
}
type PageCursor {
  cursor: String
  isCurrent: Boolean
  page: Int
}
type ContentfulDemoItemFavoriteConnection {
  "Pagination data for this connection."
  pageInfo: PageInfo!
  "Contains the nodes in this connection."
  edges: [ContentfulDemoItemFavoriteEdge]!
}
"A Relay edge containing a `ContentfulDemoItemFavorite` and its cursor."
type ContentfulDemoItemFavoriteEdge {
  "The item at the end of the edge"
  node: ContentfulDemoItemFavoriteType
  "A cursor for use in pagination"
  cursor: String!
}
type ContentfulDemoItemFavoriteType implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!
  "The ID of the object"
  id: ID!
  item: ContentfulDemoItemType!
  user: CurrentUserType!
}
type ContentfulDemoItemType implements Node {
  "The ID of the object"
  id: ID!
  fields: JSONString!
  isPublished: Boolean!
  contentfuldemoitemfavoriteSet(offset: Int, before: String, after: String, first: Int, last: Int): ContentfulDemoItemFavoriteTypeConnection!
  pk: String
}
type ContentfulDemoItemFavoriteTypeConnection {
  "Pagination data for this connection."
  pageInfo: PageInfo!
  "Contains the nodes in this connection."
  edges: [ContentfulDemoItemFavoriteTypeEdge]!
}
"A Relay edge containing a `ContentfulDemoItemFavoriteType` and its cursor."
type ContentfulDemoItemFavoriteTypeEdge {
  "The item at the end of the edge"
  node: ContentfulDemoItemFavoriteType
  "A cursor for use in pagination"
  cursor: String!
}
type DocumentDemoItemConnection {
  "Pagination data for this connection."
  pageInfo: PageInfo!
  "Contains the nodes in this connection."
  edges: [DocumentDemoItemEdge]!
}
"A Relay edge containing a `DocumentDemoItem` and its cursor."
type DocumentDemoItemEdge {
  "The item at the end of the edge"
  node: DocumentDemoItemType
  "A cursor for use in pagination"
  cursor: String!
}
type DocumentDemoItemType implements Node {
  "The ID of the object"
  id: ID!
  file: FileFieldType
  createdBy: CurrentUserType
  createdAt: DateTime!
}
type FileFieldType {
  url: String
  name: String
}
type ApiMutation {
  updateTenant(input: UpdateTenantMutationInput!): UpdateTenantMutationPayload
  "Mutation to delete a tenant from the system."
  deleteTenant(input: DeleteTenantMutationInput!): DeleteTenantMutationPayload
  createTenantInvitation(input: CreateTenantInvitationMutationInput!): CreateTenantInvitationMutationPayload
  updateTenantMembership(input: UpdateTenantMembershipMutationInput!): UpdateTenantMembershipMutationPayload
  createTenant(input: CreateTenantMutationInput!): CreateTenantMutationPayload
  acceptTenantInvitation(input: AcceptTenantInvitationMutationInput!): AcceptTenantInvitationMutationPayload
  declineTenantInvitation(input: DeclineTenantInvitationMutationInput!): DeclineTenantInvitationMutationPayload
  deleteTenantMembership(input: DeleteTenantMembershipMutationInput!): DeleteTenantMembershipMutationPayload
  generateSaasIdeas(input: GenerateSaasIdeasMutationInput!): GenerateSaasIdeasMutationPayload
  changeActiveSubscription(input: ChangeActiveSubscriptionMutationInput!): ChangeActiveSubscriptionMutationPayload
  cancelActiveSubscription(input: CancelActiveSubscriptionMutationInput!): CancelActiveSubscriptionMutationPayload
  updateDefaultPaymentMethod(input: UpdateDefaultPaymentMethodMutationInput!): UpdateDefaultPaymentMethodMutationPayload
  deletePaymentMethod(input: DeletePaymentMethodMutationInput!): DeletePaymentMethodMutationPayload
  createPaymentIntent(input: CreatePaymentIntentMutationInput!): CreatePaymentIntentMutationPayload
  updatePaymentIntent(input: UpdatePaymentIntentMutationInput!): UpdatePaymentIntentMutationPayload
  createSetupIntent(input: CreateSetupIntentMutationInput!): CreateSetupIntentMutationPayload
  changePassword(input: ChangePasswordMutationInput!): ChangePasswordMutationPayload
  updateCurrentUser(input: UpdateCurrentUserMutationInput!): UpdateCurrentUserMutationPayload
  generateOtp(input: GenerateOTPMutationInput!): GenerateOTPMutationPayload
  verifyOtp(input: VerifyOTPMutationInput!): VerifyOTPMutationPayload
  disableOtp(input: DisableOTPMutationInput!): DisableOTPMutationPayload
  tokenAuth(input: ObtainTokenMutationInput!): ObtainTokenMutationPayload
  signUp(input: SingUpMutationInput!): SingUpMutationPayload
  confirm(input: ConfirmEmailMutationInput!): ConfirmEmailMutationPayload
  passwordReset(input: PasswordResetMutationInput!): PasswordResetMutationPayload
  passwordResetConfirm(input: PasswordResetConfirmationMutationInput!): PasswordResetConfirmationMutationPayload
  validateOtp(input: ValidateOTPMutationInput!): ValidateOTPMutationPayload
  updateNotification(input: UpdateNotificationMutationInput!): UpdateNotificationMutationPayload
  markReadAllNotifications(input: MarkReadAllNotificationsMutationInput!): MarkReadAllNotificationsMutationPayload
  createCrudDemoItem(input: CreateCrudDemoItemMutationInput!): CreateCrudDemoItemMutationPayload
  updateCrudDemoItem(input: UpdateCrudDemoItemMutationInput!): UpdateCrudDemoItemMutationPayload
  deleteCrudDemoItem(input: DeleteCrudDemoItemMutationInput!): DeleteCrudDemoItemMutationPayload
  createDocumentDemoItem(input: CreateDocumentDemoItemMutationInput!): CreateDocumentDemoItemMutationPayload
  deleteDocumentDemoItem(input: DeleteDocumentDemoItemMutationInput!): DeleteDocumentDemoItemMutationPayload
  createFavoriteContentfulDemoItem(input: CreateFavoriteContentfulDemoItemMutationInput!): CreateFavoriteContentfulDemoItemMutationPayload
  deleteFavoriteContentfulDemoItem(input: DeleteFavoriteContentfulDemoItemMutationInput!): DeleteFavoriteContentfulDemoItemMutationPayload
}
type UpdateTenantMutationPayload {
  tenant: TenantType
  tenantEdge: TenantEdge
  clientMutationId: String
}
"Mutation to delete a tenant from the system."
type DeleteTenantMutationPayload {
  deletedIds: [ID]
  clientMutationId: String
}
type CreateTenantInvitationMutationPayload {
  email: String
  role: TenantUserRole
  tenantId: String
  ok: Boolean
  clientMutationId: String
}
type UpdateTenantMembershipMutationPayload {
  tenantMembership: TenantMembershipType
  tenantMembershipEdge: TenantEdge
  clientMutationId: String
}
type CreateTenantMutationPayload {
  tenant: TenantType
  tenantEdge: TenantEdge
  clientMutationId: String
}
type AcceptTenantInvitationMutationPayload {
  ok: Boolean
  clientMutationId: String
}
type DeclineTenantInvitationMutationPayload {
  ok: Boolean
  clientMutationId: String
}
type DeleteTenantMembershipMutationPayload {
  deletedIds: [ID]
  clientMutationId: String
}
type GenerateSaasIdeasMutationPayload {
  ideas: [String]
  clientMutationId: String
}
type ChangeActiveSubscriptionMutationPayload {
  subscriptionSchedule: SubscriptionScheduleType
  subscriptionScheduleEdge: SubscriptionScheduleEdge
  clientMutationId: String
}
"A Relay edge containing a `SubscriptionSchedule` and its cursor."
type SubscriptionScheduleEdge {
  "The item at the end of the edge"
  node: SubscriptionScheduleType
  "A cursor for use in pagination"
  cursor: String!
}
type CancelActiveSubscriptionMutationPayload {
  subscriptionSchedule: SubscriptionScheduleType
  subscriptionScheduleEdge: SubscriptionScheduleEdge
  clientMutationId: String
}
type UpdateDefaultPaymentMethodMutationPayload {
  activeSubscription: SubscriptionScheduleType
  paymentMethodEdge: PaymentMethodEdge
  clientMutationId: String
}
type DeletePaymentMethodMutationPayload {
  deletedIds: [ID]
  activeSubscription: SubscriptionScheduleType
  clientMutationId: String
}
type CreatePaymentIntentMutationPayload {
  paymentIntent: StripePaymentIntentType
  clientMutationId: String
}
type UpdatePaymentIntentMutationPayload {
  paymentIntent: StripePaymentIntentType
  clientMutationId: String
}
type CreateSetupIntentMutationPayload {
  setupIntent: StripeSetupIntentType
  clientMutationId: String
}
type StripeSetupIntentType implements Node {
  djstripeCreated: DateTime!
  djstripeUpdated: DateTime!
  djstripeId: ID!
  "The ID of the object"
  id: ID!
  "Null here indicates that the livemode status is unknown or was previously unrecorded. Otherwise, this field indicates whether this record comes from Stripe test mode or live mode operation."
  livemode: Boolean
  "The datetime this object was created in stripe."
  created: DateTime
  "A set of key/value pairs that you can attach to an object. It can be useful for storing additional information about an object in a structured format."
  metadata: JSONString
  "A description of this object."
  description: String
  "ID of the Connect application that created the SetupIntent."
  application: String!
  "Reason for cancellation of this SetupIntent, one of abandoned, requested_by_customer, or duplicate"
  cancellationReason: DjstripeSetupIntentCancellationReasonChoices
  "The client secret of this SetupIntent. Used for client-side retrieval using a publishable key."
  clientSecret: String!
  "The error encountered in the previous SetupIntent confirmation."
  lastSetupError: JSONString
  "If present, this property tells you what actions you need to take inorder for your customer to continue payment setup."
  nextAction: JSONString
  "Payment method used in this PaymentIntent."
  paymentMethod: StripePaymentMethodType
  "The list of payment method types (e.g. card) that this PaymentIntent is allowed to use."
  paymentMethodTypes: JSONString!
  "Status of this SetupIntent, one of requires_payment_method, requires_confirmation, requires_action, processing, canceled, or succeeded."
  status: DjstripeSetupIntentStatusChoices!
  "Indicates how the payment method is intended to be used in the future."
  usage: DjstripeSetupIntentUsageChoices!
  pk: String
}
type ChangePasswordMutationPayload {
  refresh: String
  access: String
  clientMutationId: String
}
type UpdateCurrentUserMutationPayload {
  userProfile: UserProfileType
  userProfileEdge: CurrentUserEdge
  clientMutationId: String
}
type UserProfileType implements Node {
  "The ID of the object"
  id: ID!
  user: CurrentUserType!
  firstName: String!
  lastName: String!
}
"A Relay edge containing a `CurrentUser` and its cursor."
type CurrentUserEdge {
  "The item at the end of the edge"
  node: UserProfileType
  "A cursor for use in pagination"
  cursor: String!
}
type GenerateOTPMutationPayload {
  base32: String
  otpauthUrl: String
  clientMutationId: String
}
type VerifyOTPMutationPayload {
  otpVerified: Boolean
  clientMutationId: String
}
type DisableOTPMutationPayload {
  ok: Boolean
  clientMutationId: String
}
type ObtainTokenMutationPayload {
  access: String
  refresh: String
  otpAuthToken: String
  clientMutationId: String
}
type SingUpMutationPayload {
  id: String
  email: String
  access: String
  refresh: String
  clientMutationId: String
}
type ConfirmEmailMutationPayload {
  ok: Boolean
  clientMutationId: String
}
type PasswordResetMutationPayload {
  ok: Boolean
  clientMutationId: String
}
type PasswordResetConfirmationMutationPayload {
  ok: Boolean
  clientMutationId: String
}
type ValidateOTPMutationPayload {
  access: String
  refresh: String
  clientMutationId: String
}
type UpdateNotificationMutationPayload {
  notification: NotificationType
  notificationEdge: NotificationEdge
  hasUnreadNotifications: Boolean
  clientMutationId: String
}
type MarkReadAllNotificationsMutationPayload {
  ok: Boolean
  clientMutationId: String
}
type CreateCrudDemoItemMutationPayload {
  crudDemoItem: CrudDemoItemType
  crudDemoItemEdge: CrudDemoItemEdge
  clientMutationId: String
}
type UpdateCrudDemoItemMutationPayload {
  crudDemoItem: CrudDemoItemType
  crudDemoItemEdge: CrudDemoItemEdge
  clientMutationId: String
}
type DeleteCrudDemoItemMutationPayload {
  deletedIds: [ID]
  clientMutationId: String
}
type CreateDocumentDemoItemMutationPayload {
  documentDemoItem: DocumentDemoItemType
  documentDemoItemEdge: DocumentDemoItemEdge
  clientMutationId: String
}
type DeleteDocumentDemoItemMutationPayload {
  deletedIds: [ID]
  clientMutationId: String
}
type CreateFavoriteContentfulDemoItemMutationPayload {
  contentfulDemoItemFavorite: ContentfulDemoItemFavoriteType
  contentfulDemoItemFavoriteEdge: ContentfulDemoItemFavoriteEdge
  clientMutationId: String
}
type DeleteFavoriteContentfulDemoItemMutationPayload {
  deletedIds: [ID]
  clientMutationId: String
}
type ApiSubscription {
  notificationCreated: NotificationCreatedSubscription
}
"Simple GraphQL subscription."
type NotificationCreatedSubscription {
  notification: NotificationType
}
"An object with an ID"
interface Node {
  "The ID of the object"
  id: ID!
}
"""

    Predefined tenant user roles:
    - OWNER
    - ADMIN
    - MEMBER
    
"""
enum TenantUserRole {
  OWNER
  ADMIN
  MEMBER
}
enum DjstripeProductTypeChoices {
  "Good"
  GOOD
  "Service"
  SERVICE
}
enum DjstripePlanAggregateUsageChoices {
  "Last during period"
  LAST_DURING_PERIOD
  "Last ever"
  LAST_EVER
  "Max"
  MAX
  "Sum"
  SUM
}
enum DjstripePlanBillingSchemeChoices {
  "Per-unit"
  PER_UNIT
  "Tiered"
  TIERED
}
enum DjstripePlanIntervalChoices {
  "Day"
  DAY
  "Month"
  MONTH
  "Week"
  WEEK
  "Year"
  YEAR
}
enum DjstripePlanTiersModeChoices {
  "Graduated"
  GRADUATED
  "Volume-based"
  VOLUME
}
enum DjstripePlanUsageTypeChoices {
  "Licensed"
  LICENSED
  "Metered"
  METERED
}
enum DjstripeSubscriptionStatusChoices {
  "Active"
  ACTIVE
  "Canceled"
  CANCELED
  "Incomplete"
  INCOMPLETE
  "Incomplete Expired"
  INCOMPLETE_EXPIRED
  "Past due"
  PAST_DUE
  "Trialing"
  TRIALING
  "Unpaid"
  UNPAID
}
enum DjstripePriceTypeChoices {
  "One-time"
  ONE_TIME
  "Recurring"
  RECURRING
}
enum DjstripePriceBillingSchemeChoices {
  "Per-unit"
  PER_UNIT
  "Tiered"
  TIERED
}
enum DjstripePriceTiersModeChoices {
  "Graduated"
  GRADUATED
  "Volume-based"
  VOLUME
}
enum DjstripeSubscriptionScheduleEndBehaviorChoices {
  "Cancel"
  CANCEL
  "Release"
  RELEASE
}
enum DjstripeSubscriptionScheduleStatusChoices {
  "Active"
  ACTIVE
  "Canceled"
  CANCELED
  "Completed"
  COMPLETED
  "Not started"
  NOT_STARTED
  "Released"
  RELEASED
}
enum DjstripePaymentMethodTypeChoices {
  "Acss Dbit"
  ACSS_DEBIT
  "Affirm"
  AFFIRM
  "Afterpay Clearpay"
  AFTERPAY_CLEARPAY
  "Alipay"
  ALIPAY
  "BECS Debit (Australia)"
  AU_BECS_DEBIT
  "Bacs Direct Debit"
  BACS_DEBIT
  "Bancontact"
  BANCONTACT
  "BLIK"
  BLIK
  "Boleto"
  BOLETO
  "Card"
  CARD
  "Card present"
  CARD_PRESENT
  "Customer Balance"
  CUSTOMER_BALANCE
  "EPS"
  EPS
  "FPX"
  FPX
  "Giropay"
  GIROPAY
  "Grabpay"
  GRABPAY
  "iDEAL"
  IDEAL
  "Interac (card present)"
  INTERAC_PRESENT
  "Klarna"
  KLARNA
  "Konbini"
  KONBINI
  "Link"
  LINK
  "OXXO"
  OXXO
  "Przelewy24"
  P24
  "PayNow"
  PAYNOW
  "Pix"
  PIX
  "PromptPay"
  PROMPTPAY
  "SEPA Direct Debit"
  SEPA_DEBIT
  "SOFORT"
  SOFORT
  "ACH Direct Debit"
  US_BANK_ACCOUNT
  "Wechat Pay"
  WECHAT_PAY
}
enum DjstripeChargeFailureCodeChoices {
  "Account already exists"
  ACCOUNT_ALREADY_EXISTS
  "Account country invalid address"
  ACCOUNT_COUNTRY_INVALID_ADDRESS
  "Account invalid"
  ACCOUNT_INVALID
  "Account number invalid"
  ACCOUNT_NUMBER_INVALID
  "Alipay upgrade required"
  ALIPAY_UPGRADE_REQUIRED
  "Amount too large"
  AMOUNT_TOO_LARGE
  "Amount too small"
  AMOUNT_TOO_SMALL
  "Api key expired"
  API_KEY_EXPIRED
  "Balance insufficient"
  BALANCE_INSUFFICIENT
  "Bank account exists"
  BANK_ACCOUNT_EXISTS
  "Bank account unusable"
  BANK_ACCOUNT_UNUSABLE
  "Bank account unverified"
  BANK_ACCOUNT_UNVERIFIED
  "Bitcoin upgrade required"
  BITCOIN_UPGRADE_REQUIRED
  "Card was declined"
  CARD_DECLINED
  "Charge already captured"
  CHARGE_ALREADY_CAPTURED
  "Charge already refunded"
  CHARGE_ALREADY_REFUNDED
  "Charge disputed"
  CHARGE_DISPUTED
  "Charge exceeds source limit"
  CHARGE_EXCEEDS_SOURCE_LIMIT
  "Charge expired for capture"
  CHARGE_EXPIRED_FOR_CAPTURE
  "Country unsupported"
  COUNTRY_UNSUPPORTED
  "Coupon expired"
  COUPON_EXPIRED
  "Customer max subscriptions"
  CUSTOMER_MAX_SUBSCRIPTIONS
  "Email invalid"
  EMAIL_INVALID
  "Expired card"
  EXPIRED_CARD
  "Idempotency key in use"
  IDEMPOTENCY_KEY_IN_USE
  "Incorrect address"
  INCORRECT_ADDRESS
  "Incorrect security code"
  INCORRECT_CVC
  "Incorrect number"
  INCORRECT_NUMBER
  "ZIP code failed validation"
  INCORRECT_ZIP
  "Instant payouts unsupported"
  INSTANT_PAYOUTS_UNSUPPORTED
  "Invalid card type"
  INVALID_CARD_TYPE
  "Invalid charge amount"
  INVALID_CHARGE_AMOUNT
  "Invalid security code"
  INVALID_CVC
  "Invalid expiration month"
  INVALID_EXPIRY_MONTH
  "Invalid expiration year"
  INVALID_EXPIRY_YEAR
  "Invalid number"
  INVALID_NUMBER
  "Invalid source usage"
  INVALID_SOURCE_USAGE
  "Invalid swipe data"
  INVALID_SWIPE_DATA
  "Invoice no customer line items"
  INVOICE_NO_CUSTOMER_LINE_ITEMS
  "Invoice no subscription line items"
  INVOICE_NO_SUBSCRIPTION_LINE_ITEMS
  "Invoice not editable"
  INVOICE_NOT_EDITABLE
  "Invoice upcoming none"
  INVOICE_UPCOMING_NONE
  "Livemode mismatch"
  LIVEMODE_MISMATCH
  "No card being charged"
  MISSING
  "Not allowed on standard account"
  NOT_ALLOWED_ON_STANDARD_ACCOUNT
  "Order creation failed"
  ORDER_CREATION_FAILED
  "Order required settings"
  ORDER_REQUIRED_SETTINGS
  "Order status invalid"
  ORDER_STATUS_INVALID
  "Order upstream timeout"
  ORDER_UPSTREAM_TIMEOUT
  "Out of inventory"
  OUT_OF_INVENTORY
  "Parameter invalid empty"
  PARAMETER_INVALID_EMPTY
  "Parameter invalid integer"
  PARAMETER_INVALID_INTEGER
  "Parameter invalid string blank"
  PARAMETER_INVALID_STRING_BLANK
  "Parameter invalid string empty"
  PARAMETER_INVALID_STRING_EMPTY
  "Parameter missing"
  PARAMETER_MISSING
  "Parameter unknown"
  PARAMETER_UNKNOWN
  "Parameters exclusive"
  PARAMETERS_EXCLUSIVE
  "Payment intent authentication failure"
  PAYMENT_INTENT_AUTHENTICATION_FAILURE
  "Payment intent incompatible payment method"
  PAYMENT_INTENT_INCOMPATIBLE_PAYMENT_METHOD
  "Payment intent invalid parameter"
  PAYMENT_INTENT_INVALID_PARAMETER
  "Payment intent payment attempt failed"
  PAYMENT_INTENT_PAYMENT_ATTEMPT_FAILED
  "Payment intent unexpected state"
  PAYMENT_INTENT_UNEXPECTED_STATE
  "Payment method unactivated"
  PAYMENT_METHOD_UNACTIVATED
  "Payment method unexpected state"
  PAYMENT_METHOD_UNEXPECTED_STATE
  "Payouts not allowed"
  PAYOUTS_NOT_ALLOWED
  "Platform api key expired"
  PLATFORM_API_KEY_EXPIRED
  "Postal code invalid"
  POSTAL_CODE_INVALID
  "Processing error"
  PROCESSING_ERROR
  "Product inactive"
  PRODUCT_INACTIVE
  "Rate limit"
  RATE_LIMIT
  "Resource already exists"
  RESOURCE_ALREADY_EXISTS
  "Resource missing"
  RESOURCE_MISSING
  "Routing number invalid"
  ROUTING_NUMBER_INVALID
  "Secret key required"
  SECRET_KEY_REQUIRED
  "SEPA unsupported account"
  SEPA_UNSUPPORTED_ACCOUNT
  "Shipping calculation failed"
  SHIPPING_CALCULATION_FAILED
  "SKU inactive"
  SKU_INACTIVE
  "State unsupported"
  STATE_UNSUPPORTED
  "Tax id invalid"
  TAX_ID_INVALID
  "Taxes calculation failed"
  TAXES_CALCULATION_FAILED
  "Testmode charges only"
  TESTMODE_CHARGES_ONLY
  "TLS version unsupported"
  TLS_VERSION_UNSUPPORTED
  "Token already used"
  TOKEN_ALREADY_USED
  "Token in use"
  TOKEN_IN_USE
  "Transfers not allowed"
  TRANSFERS_NOT_ALLOWED
  "Upstream order creation failed"
  UPSTREAM_ORDER_CREATION_FAILED
  "URL invalid"
  URL_INVALID
}
enum DjstripeInvoiceBillingReasonChoices {
  "Automatic pending invoice item invoice"
  AUTOMATIC_PENDING_INVOICE_ITEM_INVOICE
  "Manual"
  MANUAL
  "Subscription"
  SUBSCRIPTION
  "Subscription create"
  SUBSCRIPTION_CREATE
  "Subscription cycle"
  SUBSCRIPTION_CYCLE
  "Subscription threshold"
  SUBSCRIPTION_THRESHOLD
  "Subscription update"
  SUBSCRIPTION_UPDATE
  "Upcoming"
  UPCOMING
}
enum DjstripeInvoiceCollectionMethodChoices {
  "Charge automatically"
  CHARGE_AUTOMATICALLY
  "Send invoice"
  SEND_INVOICE
}
enum DjstripeInvoiceCustomerTaxExemptChoices {
  "Exempt"
  EXEMPT
  "None"
  NONE
  "Reverse"
  REVERSE
}
enum DjstripeInvoiceStatusChoices {
  "Draft"
  DRAFT
  "Open"
  OPEN
  "Paid"
  PAID
  "Uncollectible"
  UNCOLLECTIBLE
  "Void"
  VOID
}
enum DjstripeChargeStatusChoices {
  "Failed"
  FAILED
  "Pending"
  PENDING
  "Succeeded"
  SUCCEEDED
}
enum CrudDemoItemSort {
  NAME_ASC
  NAME_DESC
}
enum DjstripeSetupIntentCancellationReasonChoices {
  "Abandoned"
  ABANDONED
  "Duplicate"
  DUPLICATE
  "Requested by Customer"
  REQUESTED_BY_CUSTOMER
}
enum DjstripeSetupIntentStatusChoices {
  "Cancellation invalidates the intent for future confirmation and cannot be undone."
  CANCELED
  "Required actions have been handled."
  PROCESSING
  "Payment Method require additional action, such as 3D secure."
  REQUIRES_ACTION
  "Intent is ready to be confirmed."
  REQUIRES_CONFIRMATION
  "Intent created and requires a Payment Method to be attached."
  REQUIRES_PAYMENT_METHOD
  "Setup was successful and the payment method is optimized for future payments."
  SUCCEEDED
}
enum DjstripeSetupIntentUsageChoices {
  "Off session"
  OFF_SESSION
  "On session"
  ON_SESSION
}
input UpdateTenantMutationInput {
  name: String!
  billingEmail: String
  id: ID!
  clientMutationId: String
}
input DeleteTenantMutationInput {
  id: String
  clientMutationId: String
}
input CreateTenantInvitationMutationInput {
  email: String!
  role: TenantUserRole!
  tenantId: String!
  clientMutationId: String
}
input UpdateTenantMembershipMutationInput {
  id: ID!
  tenantId: String!
  role: TenantUserRole!
  clientMutationId: String
}
input CreateTenantMutationInput {
  name: String!
  billingEmail: String
  clientMutationId: String
}
input AcceptTenantInvitationMutationInput {
  id: String!
  "Token"
  token: String!
  clientMutationId: String
}
input DeclineTenantInvitationMutationInput {
  id: String!
  "Token"
  token: String!
  clientMutationId: String
}
input DeleteTenantMembershipMutationInput {
  id: String
  tenantId: String!
  clientMutationId: String
}
input GenerateSaasIdeasMutationInput {
  keywords: [String]
  clientMutationId: String
}
input ChangeActiveSubscriptionMutationInput {
  id: String
  tenantId: String!
  price: String!
  clientMutationId: String
}
input CancelActiveSubscriptionMutationInput {
  id: String
  tenantId: String!
  clientMutationId: String
}
input UpdateDefaultPaymentMethodMutationInput {
  id: String
  tenantId: String!
  clientMutationId: String
}
input DeletePaymentMethodMutationInput {
  id: String
  tenantId: String!
  clientMutationId: String
}
input CreatePaymentIntentMutationInput {
  tenantId: String!
  product: String!
  clientMutationId: String
}
input UpdatePaymentIntentMutationInput {
  id: ID!
  tenantId: String!
  product: String!
  clientMutationId: String
}
input CreateSetupIntentMutationInput {
  tenantId: String!
  clientMutationId: String
}
input ChangePasswordMutationInput {
  "Old password"
  oldPassword: String!
  "New password"
  newPassword: String!
  clientMutationId: String
}
input UpdateCurrentUserMutationInput {
  firstName: String
  lastName: String
  avatar: Upload
  clientMutationId: String
}
input GenerateOTPMutationInput {
  clientMutationId: String
}
input VerifyOTPMutationInput {
  otpToken: String!
  clientMutationId: String
}
input DisableOTPMutationInput {
  clientMutationId: String
}
input ObtainTokenMutationInput {
  email: String!
  password: String!
  clientMutationId: String
}
input SingUpMutationInput {
  id: String
  email: String!
  password: String!
  clientMutationId: String
}
input ConfirmEmailMutationInput {
  user: String!
  token: String!
  clientMutationId: String
}
input PasswordResetMutationInput {
  "User e-mail"
  email: String!
  clientMutationId: String
}
input PasswordResetConfirmationMutationInput {
  user: String!
  "New password"
  newPassword: String!
  "Token"
  token: String!
  clientMutationId: String
}
input ValidateOTPMutationInput {
  otpToken: String!
  otpAuthToken: String
  clientMutationId: String
}
input UpdateNotificationMutationInput {
  isRead: Boolean
  id: ID!
  clientMutationId: String
}
input MarkReadAllNotificationsMutationInput {
  clientMutationId: String
}
input CreateCrudDemoItemMutationInput {
  tenantId: String!
  name: String!
  createdBy: String
  clientMutationId: String
}
input UpdateCrudDemoItemMutationInput {
  id: ID!
  tenantId: String!
  name: String!
  createdBy: String
  clientMutationId: String
}
input DeleteCrudDemoItemMutationInput {
  id: String
  tenantId: String!
  clientMutationId: String
}
input CreateDocumentDemoItemMutationInput {
  file: Upload
  createdBy: String
  clientMutationId: String
}
input DeleteDocumentDemoItemMutationInput {
  id: String
  clientMutationId: String
}
input CreateFavoriteContentfulDemoItemMutationInput {
  item: String!
  user: String
  clientMutationId: String
}
input DeleteFavoriteContentfulDemoItemMutationInput {
  item: String
  clientMutationId: String
}
"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
  ) on SCALAR
